{"version":3,"sources":["Particle.js","helpers.js","Bullet.js","Ship.js","NotShip.js","Asteroid.js","newPlayer.js","playerMovement.js","Reacteroids.js","index.js"],"names":["Particle","args","this","position","velocity","radius","size","lifeSpan","inertia","delete","state","x","y","destroy","context","save","translate","fillStyle","lineWidth","beginPath","moveTo","arc","Math","PI","closePath","fill","restore","rotatePoint","p","center","angle","cos","sin","randomNumBetween","min","max","random","randomNumBetweenExcluding","exMin","exMax","Bullet","posDelta","ship","rotation","screen","width","height","rotate","Ship","rotationSpeed","speed","lastShot","create","onDie","i","particle","suze","dir","val","keys","up","accelerate","left","right","space","Date","now","bullet","strokeStyle","lineTo","stroke","NotShip","Asteroid","score","addScore","vertices","count","rad","round","asteroidVertices","asteroid","bind","length","newPlayer","socket","player","on","emit","playerMovement","otherPlayers","id","undefined","openSocket","KEY","Reacteroids","window","innerWidth","innerHeight","ratio","devicePixelRatio","down","asteroidCount","currentScore","topScore","localStorage","inGame","asteroids","bullets","particles","notship","value","e","setState","keyCode","addEventListener","handleKeys","handleResize","refs","canvas","getContext","startGame","requestAnimationFrame","update","removeEventListener","playersData","playersFound","index","data","othership","createObject","gameOver","emitPlayerData","scale","globalAlpha","fillRect","generateAsteroids","checkCollisionsWith","updateObjects","updatePlayers","howMany","item","group","push","items","splice","render","items1","items2","b","a","item1","item2","checkCollision","obj1","obj2","vx","vy","sqrt","ref","Component","document","getElementById"],"mappings":"sPAAqBA,E,WACjB,WAAYC,GAAO,oBACjBC,KAAKC,SAAWF,EAAKE,SACrBD,KAAKE,SAAWH,EAAKG,SACrBF,KAAKG,OAASJ,EAAKK,KACnBJ,KAAKK,SAAWN,EAAKM,SACrBL,KAAKM,QAAU,I,sDAIfN,KAAKO,QAAS,I,6BAGTC,GAELR,KAAKC,SAASQ,GAAKT,KAAKE,SAASO,EACjCT,KAAKC,SAASS,GAAKV,KAAKE,SAASQ,EACjCV,KAAKE,SAASO,GAAKT,KAAKM,QACxBN,KAAKE,SAASQ,GAAKV,KAAKM,QAGxBN,KAAKG,QAAU,GACZH,KAAKG,OAAS,KACfH,KAAKG,OAAS,IAEbH,KAAKK,WAAa,GACnBL,KAAKW,UAIP,IAAMC,EAAUJ,EAAMI,QACtBA,EAAQC,OACRD,EAAQE,UAAUd,KAAKC,SAASQ,EAAGT,KAAKC,SAASS,GACjDE,EAAQG,UAAY,UACpBH,EAAQI,UAAY,EACpBJ,EAAQK,YACRL,EAAQM,OAAO,GAAIlB,KAAKG,QACxBS,EAAQO,IAAI,EAAG,EAAGnB,KAAKG,OAAQ,EAAG,EAAIiB,KAAKC,IAC3CT,EAAQU,YACRV,EAAQW,OACRX,EAAQY,c,KCfL,SAASC,EAAYC,EAAGC,EAAQC,GACrC,MAAO,CACLnB,GAAKiB,EAAEjB,EAAEkB,EAAOlB,GAAGW,KAAKS,IAAID,IAAUF,EAAEhB,EAAEiB,EAAOjB,GAAGU,KAAKU,IAAIF,GAAUD,EAAOlB,EAC9EC,GAAKgB,EAAEjB,EAAEkB,EAAOlB,GAAGW,KAAKU,IAAIF,IAAUF,EAAEhB,EAAEiB,EAAOjB,GAAGU,KAAKS,IAAID,GAAUD,EAAOjB,GAO3E,SAASqB,EAAiBC,EAAKC,GACpC,OAAOb,KAAKc,UAAYD,EAAMD,EAAM,GAAKA,EAMpC,SAASG,EAA0BH,EAAKC,EAAKG,EAAOC,GAEzD,IADA,IAAIH,EAASH,EAAiBC,EAAKC,GAC5BC,EAASE,GAASF,EAASG,GAChCH,EAASd,KAAKc,UAAYD,EAAMD,EAAM,GAAKA,EAE7C,OAAOE,E,IC7CUI,E,WACnB,WAAYvC,GAAO,oBACjB,IAAIwC,EAAWd,EAAY,CAAChB,EAAE,EAAGC,GAAG,IAAK,CAACD,EAAE,EAAEC,EAAE,GAAIX,EAAKyC,KAAKC,SAAWrB,KAAKC,GAAK,KACnFrB,KAAKC,SAAW,CACdQ,EAAGV,EAAKyC,KAAKvC,SAASQ,EAAI8B,EAAS9B,EACnCC,EAAGX,EAAKyC,KAAKvC,SAASS,EAAI6B,EAAS7B,GAErCV,KAAKyC,SAAW1C,EAAKyC,KAAKC,SAC1BzC,KAAKE,SAAW,CACdO,EAAE8B,EAAS9B,EAAI,EACfC,EAAE6B,EAAS7B,EAAI,GAEjBV,KAAKG,OAAS,E,sDAIdH,KAAKO,QAAS,I,6BAGTC,GAELR,KAAKC,SAASQ,GAAKT,KAAKE,SAASO,EACjCT,KAAKC,SAASS,GAAKV,KAAKE,SAASQ,GAG5BV,KAAKC,SAASQ,EAAI,GAClBT,KAAKC,SAASS,EAAI,GAClBV,KAAKC,SAASQ,EAAID,EAAMkC,OAAOC,OAC/B3C,KAAKC,SAASS,EAAIF,EAAMkC,OAAOE,SAChC5C,KAAKW,UAIT,IAAMC,EAAUJ,EAAMI,QACtBA,EAAQC,OACRD,EAAQE,UAAUd,KAAKC,SAASQ,EAAGT,KAAKC,SAASS,GACjDE,EAAQiC,OAAO7C,KAAKyC,SAAWrB,KAAKC,GAAK,KACzCT,EAAQG,UAAY,OACpBH,EAAQI,UAAe,EACvBJ,EAAQK,YACRL,EAAQO,IAAI,EAAG,EAAG,EAAG,EAAG,EAAIC,KAAKC,IACjCT,EAAQU,YACRV,EAAQW,OACRX,EAAQY,c,KCzCSsB,E,WACjB,WAAY/C,GAAM,oBACdC,KAAKC,SAAWF,EAAKE,SACrBD,KAAKE,SAAW,CACZO,EAAG,EACHC,EAAG,GAGPV,KAAKyC,SAAW,EAChBzC,KAAK+C,cAAgB,EACrB/C,KAAKgD,MAAQ,IACbhD,KAAKM,QAAU,IACfN,KAAKG,OAAS,GACdH,KAAKiD,SAAW,EAChBjD,KAAKkD,OAASnD,EAAKmD,OACnBlD,KAAKmD,MAAQpD,EAAKoD,M,sDAIlBnD,KAAKO,QAAS,EACdP,KAAKmD,QAEL,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACvB,IAAMC,EAAW,IAAIvD,EAAS,CAC1BO,SAAU0B,EAAiB,GAAI,KAC/BuB,KAAMvB,EAAiB,EAAG,GAC1B9B,SAAU,CACNQ,EAAGT,KAAKC,SAASQ,EAAIsB,GAAkB/B,KAAKG,OAAO,EAAGH,KAAKG,OAAO,GAClEO,EAAGV,KAAKC,SAASS,EAAIqB,GAAkB/B,KAAKG,OAAO,EAAGH,KAAKG,OAAO,IAEtED,SAAU,CACNO,EAAGsB,GAAkB,IAAK,KAC1BrB,EAAGqB,GAAkB,IAAK,QAGlC/B,KAAKkD,OAAOG,EAAU,gB,6BAIvBE,GACQ,SAARA,IACCvD,KAAKyC,UAAYzC,KAAK+C,eAEf,UAARQ,IACCvD,KAAKyC,UAAYzC,KAAK+C,iB,iCAInBS,GACPxD,KAAKE,SAASO,GAAKW,KAAKU,KAAK9B,KAAKyC,SAASrB,KAAKC,GAAG,KAAOrB,KAAKgD,MAC/DhD,KAAKE,SAASQ,GAAKU,KAAKS,KAAK7B,KAAKyC,SAASrB,KAAKC,GAAG,KAAOrB,KAAKgD,MAG/D,IAAIT,EAAWd,EAAY,CAAChB,EAAE,EAAGC,GAAG,IAAK,CAACD,EAAE,EAAGC,EAAE,IAAKV,KAAKyC,SAAS,KAAOrB,KAAKC,GAAK,KAC/EgC,EAAW,IAAIvD,EAAS,CAC1BO,SAAU0B,EAAiB,GAAI,IAC/B3B,KAAM2B,EAAiB,EAAG,GAC1B9B,SAAU,CACNQ,EAAGT,KAAKC,SAASQ,EAAI8B,EAAS9B,EAAIsB,GAAkB,EAAG,GACvDrB,EAAGV,KAAKC,SAASS,EAAI6B,EAAS7B,EAAIqB,GAAkB,EAAG,IAE3D7B,SAAU,CACNO,EAAG8B,EAAS9B,EAAIsB,EAAiB,EAAG,GACpCrB,EAAG6B,EAAS7B,EAAIqB,EAAiB,EAAG,MAG5C/B,KAAKkD,OAAOG,EAAU,e,6BAKnB7C,GAaH,GAVGA,EAAMiD,KAAKC,IACZ1D,KAAK2D,WAAW,GAGfnD,EAAMiD,KAAKG,MACZ5D,KAAK6C,OAAO,QAEXrC,EAAMiD,KAAKI,OACZ7D,KAAK6C,OAAO,SAEXrC,EAAMiD,KAAKK,OAASC,KAAKC,MAAQhE,KAAKiD,SAAW,IAAI,CACtD,IAAMgB,EAAS,IAAI3B,EAAO,CAACE,KAAMxC,OACjCA,KAAKkD,OAAOe,EAAQ,WACpBjE,KAAKiD,SAAWc,KAAKC,MAIvBhE,KAAKC,SAASQ,GAAKT,KAAKE,SAASO,EACjCT,KAAKC,SAASS,GAAKV,KAAKE,SAASQ,EACjCV,KAAKE,SAASO,GAAKT,KAAKM,QACxBN,KAAKE,SAASQ,GAAKV,KAAKM,QAGpBN,KAAKyC,UAAY,MACnBzC,KAAKyC,UAAY,KAEfzC,KAAKyC,SAAW,IAClBzC,KAAKyC,UAAY,KAIhBzC,KAAKC,SAASQ,EAAID,EAAMkC,OAAOC,MAAO3C,KAAKC,SAASQ,EAAI,EACnDT,KAAKC,SAASQ,EAAI,IAAGT,KAAKC,SAASQ,EAAID,EAAMkC,OAAOC,OACzD3C,KAAKC,SAASS,EAAIF,EAAMkC,OAAOE,OAAQ5C,KAAKC,SAASS,EAAI,EACpDV,KAAKC,SAASS,EAAI,IAAGV,KAAKC,SAASS,EAAIF,EAAMkC,OAAOE,QAG5D,IAAMhC,EAAUJ,EAAMI,QACtBA,EAAQC,OACRD,EAAQE,UAAUd,KAAKC,SAASQ,EAAGT,KAAKC,SAASS,GACjDE,EAAQiC,OAAO7C,KAAKyC,SAAWrB,KAAKC,GAAK,KACzCT,EAAQsD,YAAc,UACtBtD,EAAQG,UAAY,UACpBH,EAAQI,UAAY,EACpBJ,EAAQK,YACRL,EAAQM,OAAO,GAAI,IACnBN,EAAQuD,OAAO,GAAI,IACnBvD,EAAQuD,OAAO,EAAG,GAClBvD,EAAQuD,QAAQ,EAAG,GACnBvD,EAAQuD,QAAQ,GAAI,IACpBvD,EAAQU,YACRV,EAAQW,OACRX,EAAQwD,SACRxD,EAAQY,c,KChIK6C,E,WACjB,WAAYtE,GAAM,oBACdC,KAAKC,SAAWF,EAAKE,SACrBD,KAAKE,SAAW,CACZO,EAAG,EACHC,EAAG,GAGPV,KAAKyC,SAAW,EAChBzC,KAAK+C,cAAgB,EACrB/C,KAAKgD,MAAQ,IACbhD,KAAKM,QAAU,IACfN,KAAKG,OAAS,GACdH,KAAKiD,SAAW,EAChBjD,KAAKkD,OAASnD,EAAKmD,OACnBlD,KAAKmD,MAAQpD,EAAKoD,M,sDAIlBnD,KAAKO,QAAS,EACdP,KAAKmD,QAEL,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACvB,IAAMC,EAAW,IAAIvD,EAAS,CAC1BO,SAAU0B,EAAiB,GAAI,KAC/BuB,KAAMvB,EAAiB,EAAG,GAC1B9B,SAAU,CACNQ,EAAGT,KAAKC,SAASQ,EAAIsB,GAAkB/B,KAAKG,OAAO,EAAGH,KAAKG,OAAO,GAClEO,EAAGV,KAAKC,SAASS,EAAIqB,GAAkB/B,KAAKG,OAAO,EAAGH,KAAKG,OAAO,IAEtED,SAAU,CACNO,EAAGsB,GAAkB,IAAK,KAC1BrB,EAAGqB,GAAkB,IAAK,QAGlC/B,KAAKkD,OAAOG,EAAU,gB,6BAIvBE,GACQ,SAARA,IACCvD,KAAKyC,UAAYzC,KAAK+C,eAEf,UAARQ,IACCvD,KAAKyC,UAAYzC,KAAK+C,iB,iCAInBS,GACPxD,KAAKE,SAASO,GAAKW,KAAKU,KAAK9B,KAAKyC,SAASrB,KAAKC,GAAG,KAAOrB,KAAKgD,MAC/DhD,KAAKE,SAASQ,GAAKU,KAAKS,KAAK7B,KAAKyC,SAASrB,KAAKC,GAAG,KAAOrB,KAAKgD,MAG/D,IAAIT,EAAWd,EAAY,CAAChB,EAAE,EAAGC,GAAG,IAAK,CAACD,EAAE,EAAGC,EAAE,IAAKV,KAAKyC,SAAS,KAAOrB,KAAKC,GAAK,KAC/EgC,EAAW,IAAIvD,EAAS,CAC1BO,SAAU0B,EAAiB,GAAI,IAC/B3B,KAAM2B,EAAiB,EAAG,GAC1B9B,SAAU,CACNQ,EAAGT,KAAKC,SAASQ,EAAI8B,EAAS9B,EAAIsB,GAAkB,EAAG,GACvDrB,EAAGV,KAAKC,SAASS,EAAI6B,EAAS7B,EAAIqB,GAAkB,EAAG,IAE3D7B,SAAU,CACNO,EAAG8B,EAAS9B,EAAIsB,EAAiB,EAAG,GACpCrB,EAAG6B,EAAS7B,EAAIqB,EAAiB,EAAG,MAG5C/B,KAAKkD,OAAOG,EAAU,e,6BAKnB7C,GAoBHR,KAAKC,SAASQ,GAAKT,KAAKE,SAASO,EACjCT,KAAKC,SAASS,GAAKV,KAAKE,SAASQ,EACjCV,KAAKE,SAASO,GAAKT,KAAKM,QACxBN,KAAKE,SAASQ,GAAKV,KAAKM,QAGpBN,KAAKyC,UAAY,MACnBzC,KAAKyC,UAAY,KAEfzC,KAAKyC,SAAW,IAClBzC,KAAKyC,UAAY,KAIhBzC,KAAKC,SAASQ,EAAID,EAAMkC,OAAOC,MAAO3C,KAAKC,SAASQ,EAAI,EACnDT,KAAKC,SAASQ,EAAI,IAAGT,KAAKC,SAASQ,EAAID,EAAMkC,OAAOC,OACzD3C,KAAKC,SAASS,EAAIF,EAAMkC,OAAOE,OAAQ5C,KAAKC,SAASS,EAAI,EACpDV,KAAKC,SAASS,EAAI,IAAGV,KAAKC,SAASS,EAAIF,EAAMkC,OAAOE,QAG5D,IAAMhC,EAAUJ,EAAMI,QACtBA,EAAQC,OACRD,EAAQE,UAAUd,KAAKC,SAASQ,EAAGT,KAAKC,SAASS,GACjDE,EAAQiC,OAAO7C,KAAKyC,SAAWrB,KAAKC,GAAK,KACzCT,EAAQsD,YAAc,UACtBtD,EAAQG,UAAY,UACpBH,EAAQI,UAAY,EACpBJ,EAAQK,YACRL,EAAQM,OAAO,GAAI,IACnBN,EAAQuD,OAAO,GAAI,IACnBvD,EAAQuD,OAAO,EAAG,GAClBvD,EAAQuD,QAAQ,EAAG,GACnBvD,EAAQuD,QAAQ,GAAI,IACpBvD,EAAQU,YACRV,EAAQW,OACRX,EAAQwD,SACRxD,EAAQY,c,KC/HK8C,E,WACnB,WAAYvE,GAAO,oBACjBC,KAAKC,SAAWF,EAAKE,SACrBD,KAAKE,SAAW,CACdO,EAAGsB,GAAkB,IAAK,KAC1BrB,EAAGqB,GAAkB,IAAK,MAE5B/B,KAAKyC,SAAW,EAChBzC,KAAK+C,cAAgBhB,GAAkB,EAAG,GAC1C/B,KAAKG,OAASJ,EAAKK,KACnBJ,KAAKuE,MAAS,GAAGvE,KAAKG,OAAQ,EAC9BH,KAAKkD,OAASnD,EAAKmD,OACnBlD,KAAKwE,SAAWzE,EAAKyE,SACrBxE,KAAKyE,SJRF,SAA0BC,EAAOC,GAEpC,IADA,IAAIjD,EAAI,GACC0B,EAAI,EAAGA,EAAIsB,EAAOtB,IACzB1B,EAAE0B,GAAK,CACL3C,IAAKW,KAAKU,IAAK,IAAI4C,EAAOtB,EAAEhC,KAAKC,GAAG,KAAOD,KAAKwD,MAAoB,EAAdxD,KAAKc,SAAW,GAAGd,KAAKc,SAAS,GAAGyC,EAC1FjE,IAAKU,KAAKS,IAAK,IAAI6C,EAAOtB,EAAEhC,KAAKC,GAAG,KAAOD,KAAKwD,MAAoB,EAAdxD,KAAKc,SAAW,GAAGd,KAAKc,SAAS,GAAGyC,GAG9F,OAAOjD,EIASmD,CAAiB,EAAG9E,EAAKK,M,sDAIzCJ,KAAKO,QAAS,EAId,IAAK,IAAI6C,EAAI,EAAGA,EAAIpD,KAAKG,OAAQiD,IAAK,CACpC,IAAMC,EAAW,IAAIvD,EAAS,CAC5BO,SAAU0B,EAAiB,GAAI,KAC/B3B,KAAM2B,EAAiB,EAAG,GAC1B9B,SAAU,CACRQ,EAAGT,KAAKC,SAASQ,EAAIsB,GAAkB/B,KAAKG,OAAO,EAAGH,KAAKG,OAAO,GAClEO,EAAGV,KAAKC,SAASS,EAAIqB,GAAkB/B,KAAKG,OAAO,EAAGH,KAAKG,OAAO,IAEpED,SAAU,CACRO,EAAGsB,GAAkB,IAAK,KAC1BrB,EAAGqB,GAAkB,IAAK,QAG9B/B,KAAKkD,OAAOG,EAAU,aAIxB,GAAGrD,KAAKG,OAAS,GACf,IAAK,IAAIiD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI0B,EAAW,IAAIR,EAAS,CAE1BlE,KAAMJ,KAAKG,OAAO,EAClBF,SAAU,CACRQ,EAAGsB,GAAkB,GAAI,IAAI/B,KAAKC,SAASQ,EAC3CC,EAAGqB,GAAkB,GAAI,IAAI/B,KAAKC,SAASS,GAE7CwC,OAAQlD,KAAKkD,OAAO6B,KAAK/E,QAG3BA,KAAKkD,OAAO4B,EAAU,gB,6BAKrBtE,GAELR,KAAKC,SAASQ,GAAKT,KAAKE,SAASO,EACjCT,KAAKC,SAASS,GAAKV,KAAKE,SAASQ,EAGjCV,KAAKyC,UAAYzC,KAAK+C,cAClB/C,KAAKyC,UAAY,MACnBzC,KAAKyC,UAAY,KAEfzC,KAAKyC,SAAW,IAClBzC,KAAKyC,UAAY,KAIhBzC,KAAKC,SAASQ,EAAID,EAAMkC,OAAOC,MAAQ3C,KAAKG,OAAQH,KAAKC,SAASQ,GAAKT,KAAKG,OACvEH,KAAKC,SAASQ,GAAKT,KAAKG,SAAQH,KAAKC,SAASQ,EAAID,EAAMkC,OAAOC,MAAQ3C,KAAKG,QACjFH,KAAKC,SAASS,EAAIF,EAAMkC,OAAOE,OAAS5C,KAAKG,OAAQH,KAAKC,SAASS,GAAKV,KAAKG,OACxEH,KAAKC,SAASS,GAAKV,KAAKG,SAAQH,KAAKC,SAASS,EAAIF,EAAMkC,OAAOE,OAAS5C,KAAKG,QAGrF,IAAMS,EAAUJ,EAAMI,QACtBA,EAAQC,OACRD,EAAQE,UAAUd,KAAKC,SAASQ,EAAGT,KAAKC,SAASS,GACjDE,EAAQiC,OAAO7C,KAAKyC,SAAWrB,KAAKC,GAAK,KACzCT,EAAQsD,YAAc,OACtBtD,EAAQI,UAAY,EACpBJ,EAAQK,YACRL,EAAQM,OAAO,GAAIlB,KAAKG,QACxB,IAAK,IAAIiD,EAAI,EAAGA,EAAIpD,KAAKyE,SAASO,OAAQ5B,IACxCxC,EAAQuD,OAAOnE,KAAKyE,SAASrB,GAAG3C,EAAGT,KAAKyE,SAASrB,GAAG1C,GAEtDE,EAAQU,YACRV,EAAQwD,SACRxD,EAAQY,c,KClFGyD,EAVG,SAACC,EAAQC,GACvBD,EAAOE,GAAG,WAAW,WACjBF,EAAOG,KAAK,aAAc,CACtB5E,EAAG0E,EAAOlF,SAASQ,EACnBC,EAAGyE,EAAOlF,SAASS,EACnBkB,MAAOuD,EAAO1C,eCSX6C,EAdQ,SAAAC,GACnB,IAAI,IAAIC,KAAMD,EAAa,CACvB,IAAIJ,EAASI,EAAaC,GAC1B,QAAgBC,IAAbN,EAAO1E,EAAgB,CACtB0E,EAAOlF,SAASQ,GAAsC,IAAhC0E,EAAO1E,EAAI0E,EAAOlF,SAASQ,GACjD0E,EAAOlF,SAASS,GAAsC,IAAhCyE,EAAO1E,EAAI0E,EAAOlF,SAASS,GAErCyE,EAAO1C,Y,QCKzByC,E,MAASQ,GAAW,2CACtBH,EAAe,GAEbI,EACK,GADLA,EAEK,GAFLA,EAGE,GAHFA,EAIC,GAJDA,EAKC,GALDA,EAMC,GANDA,EAOK,GAIEC,EAAb,kDACI,aAAe,IAAD,8BACV,gBACKpF,MAAQ,CACXkC,OAAQ,CACNC,MAAOkD,OAAOC,WACdlD,OAAQiD,OAAOE,YACfC,MAAOH,OAAOI,kBAAoB,GAEpCrF,QAAS,KACT6C,KAAO,CACLG,KAAQ,EACRC,MAAQ,EACRH,GAAQ,EACRwC,KAAQ,EACRpC,MAAQ,GAEVqC,cAAe,EACfC,aAAc,EACdC,SAAUC,aAAY,UAAgB,EACtCC,QAAQ,GAEV,EAAK/D,KAAO,GACZ,EAAKgE,UAAY,GACjB,EAAKC,QAAU,GACf,EAAKC,UAAY,GACjB,EAAKC,QAAU,GAzBL,EADlB,yDA6BiBC,EAAOC,GAChB7G,KAAK8G,SAAS,CACZpE,OAAS,CACPC,MAAOkD,OAAOC,WACdlD,OAAQiD,OAAOE,YACfC,MAAOH,OAAOI,kBAAoB,OAlC9C,iCAuCeW,EAAOC,GACd,IAAIpD,EAAOzD,KAAKQ,MAAMiD,KACnBoD,EAAEE,UAAYpB,GAAckB,EAAEE,UAAYpB,IAAOlC,EAAKG,KAAQgD,GAC9DC,EAAEE,UAAYpB,GAAckB,EAAEE,UAAYpB,IAAOlC,EAAKI,MAAQ+C,GAC9DC,EAAEE,UAAYpB,GAAckB,EAAEE,UAAYpB,IAAOlC,EAAKC,GAAQkD,GAC9DC,EAAEE,UAAYpB,IAAWlC,EAAKK,MAAQ8C,GACzC5G,KAAK8G,SAAS,CACZrD,KAAOA,MA9CjB,0CAkDyB,IAAD,OAChBoC,OAAOmB,iBAAiB,QAAWhH,KAAKiH,WAAWlC,KAAK/E,MAAM,IAC9D6F,OAAOmB,iBAAiB,UAAWhH,KAAKiH,WAAWlC,KAAK/E,MAAM,IAC9D6F,OAAOmB,iBAAiB,SAAWhH,KAAKkH,aAAanC,KAAK/E,MAAM,IAEhE,IAAMY,EAAUZ,KAAKmH,KAAKC,OAAOC,WAAW,MAC5CrH,KAAK8G,SAAS,CAAElG,QAASA,IACzBZ,KAAKsH,YACLC,uBAAsB,WAAO,EAAKC,cA1D1C,6CA8DQ3B,OAAO4B,oBAAoB,QAASzH,KAAKiH,YACzCpB,OAAO4B,oBAAoB,UAAWzH,KAAKiH,YAC3CpB,OAAO4B,oBAAoB,SAAUzH,KAAKkH,gBAhElD,oCAmEkBhC,EAAQK,GAAc,IAAD,OACjCL,EAAOE,GAAG,kBAAkB,SAAAsC,GACxB,IAAIC,EAAe,GAEnB,IAAI,IAAIC,KAASF,EAAY,CACzB,IAAMG,EAAOH,EAAYE,GACzB,QAA2BnC,IAAxBF,EAAaqC,IAAwBA,IAAU1C,EAAOM,GAAG,CAExD,IAAIsC,EAAY,IAAIzD,EAAQ,CACxBpE,SAAU,CACRQ,EAAGoH,EAAKpH,EACRC,EAAGmH,EAAKnH,GAEVwC,OAAQ,EAAK6E,aAAahD,KAAK,GAC/B5B,MAAO,EAAK6E,SAASjD,KAAK,KAE5B,EAAKgD,aAAaD,EAAW,WAC7BvC,EAAaqC,GAASE,EAE5BH,EAAaC,IAAS,EAEnBA,IAAU1C,EAAOM,KAEhBD,EAAaqC,GAAOnH,EAAIoH,EAAKpH,EAC7B8E,EAAaqC,GAAOlH,EAAImH,EAAKnH,EAC7B6E,EAAaqC,GAAOnF,SAAWoF,EAAKjG,OAG5C,IAAI,IAAI4D,KAAMD,EACNoC,EAAanC,IAEbD,EAAaC,GAAI7E,eAlGnC,uCA2GQuE,EAAOG,KAAK,cAAerF,KAAKwC,KAAK,MA3G7C,+BA+Gc,IAAD,OACC5B,EAAUZ,KAAKQ,MAAMI,QAErB4B,GADOxC,KAAKQ,MAAMiD,KACXzD,KAAKwC,KAAK,IACPxC,KAAK2G,QAmBrB,GAjBGnE,IACGA,EAAKtC,SAASO,EAAI,IAAO+B,EAAKtC,SAASO,GAAK,IAAS+B,EAAKtC,SAASQ,EAAI,IAAO8B,EAAKtC,SAASQ,GAAK,KACnGV,KAAKiI,iBAGT3C,EAAeC,GAEf3E,EAAQC,OACRD,EAAQsH,MAAMlI,KAAKQ,MAAMkC,OAAOsD,MAAOhG,KAAKQ,MAAMkC,OAAOsD,OAGzDpF,EAAQG,UAAY,OACpBH,EAAQuH,YAAc,GACtBvH,EAAQwH,SAAS,EAAG,EAAGpI,KAAKQ,MAAMkC,OAAOC,MAAO3C,KAAKQ,MAAMkC,OAAOE,QAClEhC,EAAQuH,YAAc,GAGlBnI,KAAKwG,UAAUxB,OAAO,CACxB,IAAIN,EAAQ1E,KAAKQ,MAAM2F,cAAgB,EACvCnG,KAAK8G,SAAS,CAAEX,cAAezB,IAC/B1E,KAAKqI,kBAAkB3D,GAIzB1E,KAAKsI,oBAAoBtI,KAAKyG,QAASzG,KAAKwG,WAC5CxG,KAAKsI,oBAAoBtI,KAAKwC,KAAMxC,KAAKwG,WAGzCxG,KAAKuI,cAAcvI,KAAK0G,UAAW,aACnC1G,KAAKuI,cAAcvI,KAAKwG,UAAW,aACnCxG,KAAKuI,cAAcvI,KAAKyG,QAAS,WACjCzG,KAAKuI,cAAcvI,KAAKwC,KAAM,QAC9BxC,KAAKuI,cAAcvI,KAAK2G,QAAS,WAEjC/F,EAAQY,UAGR+F,uBAAsB,WAAO,EAAKC,cA1J1C,kCAgKQxH,KAAK8G,SAAS,CACZP,QAAQ,EACRH,aAAc,IAKhB,IAAI5D,EAAO,IAAIM,EAAK,CAClB7C,SAAU,CACRQ,EAAGT,KAAKQ,MAAMkC,OAAOC,MAAM,EAC3BjC,EAAGV,KAAKQ,MAAMkC,OAAOE,OAAO,GAE9BM,OAAQlD,KAAK+H,aAAahD,KAAK/E,MAC/BmD,MAAOnD,KAAKgI,SAASjD,KAAK/E,QAE5BA,KAAK+H,aAAavF,EAAM,QACxByC,EAAUC,EAAQ1C,GAClBxC,KAAKwI,cAActD,EAAQK,GAI3BvF,KAAKwG,UAAY,GACjBxG,KAAKqI,kBAAkBrI,KAAKQ,MAAM2F,iBAtL1C,iCA0LMnG,KAAK8G,SAAS,CACZP,QAAQ,IAIPvG,KAAKQ,MAAM4F,aAAepG,KAAKQ,MAAM6F,WACtCrG,KAAK8G,SAAS,CACZT,SAAUrG,KAAKQ,MAAM4F,eAEvBE,aAAY,SAAetG,KAAKQ,MAAM4F,gBAnM9C,wCAuMsBqC,GAGhB,IAFA,IACIjG,EAAOxC,KAAKwC,KAAK,GACZY,EAAI,EAAGA,EAAIqF,EAASrF,IAAK,CAChC,IAAI0B,EAAW,IAAIR,EAAS,CAC1BlE,KAAM,GACNH,SAAU,CACRQ,EAAG0B,EAA0B,EAAGnC,KAAKQ,MAAMkC,OAAOC,MAAOH,EAAKvC,SAASQ,EAAE,GAAI+B,EAAKvC,SAASQ,EAAE,IAC7FC,EAAGyB,EAA0B,EAAGnC,KAAKQ,MAAMkC,OAAOE,OAAQJ,EAAKvC,SAASS,EAAE,GAAI8B,EAAKvC,SAASS,EAAE,KAEhGwC,OAAQlD,KAAK+H,aAAahD,KAAK/E,QAGjCA,KAAK+H,aAAajD,EAAU,gBApNpC,mCAwNiB4D,EAAMC,GACf3I,KAAK2I,GAAOC,KAAKF,KAzNzB,oCA4NkBG,EAAOF,GACjB,IADuB,EACnBf,EAAQ,EADW,cAENiB,GAFM,IAEvB,2BAAwB,SACbtI,OACPP,KAAK2I,GAAOG,OAAOlB,EAAO,GAE1BiB,EAAMjB,GAAOmB,OAAO/I,KAAKQ,OAE3BoH,KARqB,iCA5N/B,0CAwOwBoB,EAAQC,GAGxB,IAFA,IACIC,EADAC,EAAIH,EAAOhE,OAAS,EAEjBmE,GAAK,IAAKA,EAEf,IADAD,EAAID,EAAOjE,OAAS,EACbkE,GAAK,IAAKA,EAAE,CACjB,IAAIE,EAAQJ,EAAOG,GACfE,EAAQJ,EAAOC,GAChBlJ,KAAKsJ,eAAeF,EAAOC,KAC5BD,EAAMzI,UACN0I,EAAM1I,cAlPpB,qCAwPmB4I,EAAMC,GACjB,IAAIC,EAAKF,EAAKtJ,SAASQ,EAAI+I,EAAKvJ,SAASQ,EACrCiJ,EAAKH,EAAKtJ,SAASS,EAAI8I,EAAKvJ,SAASS,EAEzC,OADaU,KAAKuI,KAAKF,EAAKA,EAAKC,EAAKA,GAC1BH,EAAKpJ,OAASqJ,EAAKrJ,SA5PvC,+BAmQQ,OACI,6BACI,4BAAQyJ,IAAI,SACRjH,MAAO3C,KAAKQ,MAAMkC,OAAOC,MAAQ3C,KAAKQ,MAAMkC,OAAOsD,MACnDpD,OAAQ5C,KAAKQ,MAAMkC,OAAOE,OAAS5C,KAAKQ,MAAMkC,OAAOsD,aAvQzE,GAAiC6D,a,MCrBjCd,iBAAO,kBAAC,EAAD,MAAiBe,SAASC,eAAe,W","file":"static/js/main.b0d09b0c.chunk.js","sourcesContent":["export default class Particle {\n    constructor(args) {\n      this.position = args.position\n      this.velocity = args.velocity\n      this.radius = args.size;\n      this.lifeSpan = args.lifeSpan;\n      this.inertia = 0.98;\n    }\n  \n    destroy(){\n      this.delete = true;\n    }\n  \n    render(state){\n      // Move\n      this.position.x += this.velocity.x;\n      this.position.y += this.velocity.y;\n      this.velocity.x *= this.inertia;\n      this.velocity.y *= this.inertia;\n  \n      // Shrink\n      this.radius -= 0.1;\n      if(this.radius < 0.1) {\n        this.radius = 0.1;\n      }\n      if(this.lifeSpan-- < 0){\n        this.destroy()\n      }\n  \n      // Draw\n      const context = state.context;\n      context.save();\n      context.translate(this.position.x, this.position.y);\n      context.fillStyle = '#ffffff';\n      context.lineWidth = 2;\n      context.beginPath();\n      context.moveTo(0, -this.radius);\n      context.arc(0, 0, this.radius, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.restore();\n    }\n  }\n  ","// From: http://codepen.io/bungu/pen/rawvJe\n\n/**\n * Generates vertices for asteroid polygon with certain count and radius\n * @param  {Number} count   Number of vertices\n * @param  {Number} rad     Maximal radius of polygon\n * @return {Array}        Array of vertices: {x: Number, y: Number}\n */\nexport function asteroidVertices(count, rad) {\n    let p = [];\n    for (let i = 0; i < count; i++) {\n      p[i] = {\n        x: (-Math.sin((360/count)*i*Math.PI/180) + Math.round(Math.random()*2-1)*Math.random()/3)*rad,\n        y: (-Math.cos((360/count)*i*Math.PI/180) + Math.round(Math.random()*2-1)*Math.random()/3)*rad\n      };\n    }\n    return p;\n  };\n  \n  /**\n   * Rotate point around center on certain angle\n   * @param {Object} p        {x: Number, y: Number}\n   * @param {Object} center   {x: Number, y: Number}\n   * @param {Number} angle    Angle in radians\n   */\n  export function rotatePoint(p, center, angle) {\n    return {\n      x: ((p.x-center.x)*Math.cos(angle) - (p.y-center.y)*Math.sin(angle)) + center.x,\n      y: ((p.x-center.x)*Math.sin(angle) + (p.y-center.y)*Math.cos(angle)) + center.y\n    };\n  };\n  \n  /**\n   * Random Number between 2 numbers\n   */\n  export function randomNumBetween(min, max) {\n    return Math.random() * (max - min + 1) + min;\n  };\n  \n  /**\n   * Random Number between 2 numbers excluding a certain range\n   */\n  export function randomNumBetweenExcluding(min, max, exMin, exMax) {\n    let random = randomNumBetween(min, max);\n    while (random > exMin && random < exMax) {\n      random = Math.random() * (max - min + 1) + min;\n    }\n    return random;\n  };\n  ","import { rotatePoint } from './helpers';\n\nexport default class Bullet {\n  constructor(args) {\n    let posDelta = rotatePoint({x:0, y:-20}, {x:0,y:0}, args.ship.rotation * Math.PI / 180);\n    this.position = {\n      x: args.ship.position.x + posDelta.x,\n      y: args.ship.position.y + posDelta.y\n    };\n    this.rotation = args.ship.rotation;\n    this.velocity = {\n      x:posDelta.x / 2,\n      y:posDelta.y / 2\n    };\n    this.radius = 2;\n  }\n\n  destroy(){\n    this.delete = true;\n  }\n\n  render(state){\n    // Move\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // Delete if it goes out of bounds\n    if ( this.position.x < 0\n      || this.position.y < 0\n      || this.position.x > state.screen.width\n      || this.position.y > state.screen.height ) {\n        this.destroy();\n    }\n\n    // Draw\n    const context = state.context;\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.fillStyle = '#FFF';\n    context.lineWidth = (0,5);\n    context.beginPath();\n    context.arc(0, 0, 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.restore();\n  }\n}\n","import Particle from './Particle'\nimport Bullet from './Bullet'\nimport { rotatePoint, randomNumBetween } from './helpers'\n\nexport default class Ship {\n    constructor(args){\n        this.position = args.position\n        this.velocity = {\n            x: 0,\n            y: 0\n        }\n        \n        this.rotation = 0\n        this.rotationSpeed = 6\n        this.speed = 0.15\n        this.inertia = 0.99\n        this.radius = 20\n        this.lastShot = 0\n        this.create = args.create\n        this.onDie = args.onDie\n    }\n\n    destroy(){\n        this.delete = true\n        this.onDie()\n        //explosion animation\n        for(let i = 0; i < 60; i++){\n            const particle = new Particle({\n                lifeSpan: randomNumBetween(60, 100),\n                suze: randomNumBetween(1, 4),\n                position: {\n                    x: this.position.x + randomNumBetween(-this.radius/4, this.radius/4),\n                    y: this.position.y + randomNumBetween(-this.radius/4, this.radius/4)\n                },\n                velocity: {\n                    x: randomNumBetween(-1.5, 1.5),\n                    y: randomNumBetween(-1.5, 1.5)\n                }\n            })\n            this.create(particle, 'particles')\n        }\n    }\n\n    rotate(dir){\n        if(dir === 'LEFT'){\n            this.rotation -= this.rotationSpeed\n        }\n        if(dir === 'RIGHT'){\n            this.rotation += this.rotationSpeed\n        }\n    }\n\n    accelerate(val){\n        this.velocity.x -= Math.sin(-this.rotation*Math.PI/180) * this.speed\n        this.velocity.y -= Math.cos(-this.rotation*Math.PI/180) * this.speed\n\n        //thruster animation\n        let posDelta = rotatePoint({x:0, y:-10}, {x:0, y:0}, (this.rotation-180) * Math.PI / 180)\n        const particle = new Particle({\n            lifeSpan: randomNumBetween(20, 40),\n            size: randomNumBetween(1, 3),\n            position: {\n                x: this.position.x + posDelta.x + randomNumBetween(-2, 2),\n                y: this.position.y + posDelta.y + randomNumBetween(-2, 2)\n            },\n            velocity: {\n                x: posDelta.x / randomNumBetween(3, 5),\n                y: posDelta.y / randomNumBetween(3, 5)\n            }\n        })\n        this.create(particle, 'particles')\n    }\n\n    \n\n    render(state){\n        \n        // Controls\n        if(state.keys.up){\n          this.accelerate(1);\n          \n        }\n        if(state.keys.left){\n          this.rotate('LEFT');\n        }\n        if(state.keys.right){\n          this.rotate('RIGHT');\n        }\n        if(state.keys.space && Date.now() - this.lastShot > 300){\n          const bullet = new Bullet({ship: this});\n          this.create(bullet, 'bullets');\n          this.lastShot = Date.now();\n        }\n    \n        // Move\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        this.velocity.x *= this.inertia;\n        this.velocity.y *= this.inertia;\n    \n        // Rotation\n        if (this.rotation >= 360) {\n          this.rotation -= 360;\n        }\n        if (this.rotation < 0) {\n          this.rotation += 360;\n        }\n    \n        // Screen edges\n        if(this.position.x > state.screen.width) this.position.x = 0;\n        else if(this.position.x < 0) this.position.x = state.screen.width;\n        if(this.position.y > state.screen.height) this.position.y = 0;\n        else if(this.position.y < 0) this.position.y = state.screen.height;\n    \n        // Draw\n        const context = state.context;\n        context.save();\n        context.translate(this.position.x, this.position.y);\n        context.rotate(this.rotation * Math.PI / 180);\n        context.strokeStyle = '#ffffff';\n        context.fillStyle = '#000000';\n        context.lineWidth = 2;\n        context.beginPath();\n        context.moveTo(0, -15);\n        context.lineTo(10, 10);\n        context.lineTo(5, 7);\n        context.lineTo(-5, 7);\n        context.lineTo(-10, 10);\n        context.closePath();\n        context.fill();\n        context.stroke();\n        context.restore();\n      }\n\n}","import Particle from './Particle'\nimport { rotatePoint, randomNumBetween } from './helpers'\n\nexport default class NotShip {\n    constructor(args){\n        this.position = args.position\n        this.velocity = {\n            x: 0,\n            y: 0\n        }\n        \n        this.rotation = 0\n        this.rotationSpeed = 6\n        this.speed = 0.15\n        this.inertia = 0.99\n        this.radius = 20\n        this.lastShot = 0\n        this.create = args.create\n        this.onDie = args.onDie\n    }\n\n    destroy(){\n        this.delete = true\n        this.onDie()\n        //explosion animation\n        for(let i = 0; i < 60; i++){\n            const particle = new Particle({\n                lifeSpan: randomNumBetween(60, 100),\n                suze: randomNumBetween(1, 4),\n                position: {\n                    x: this.position.x + randomNumBetween(-this.radius/4, this.radius/4),\n                    y: this.position.y + randomNumBetween(-this.radius/4, this.radius/4)\n                },\n                velocity: {\n                    x: randomNumBetween(-1.5, 1.5),\n                    y: randomNumBetween(-1.5, 1.5)\n                }\n            })\n            this.create(particle, 'particles')\n        }\n    }\n\n    rotate(dir){\n        if(dir === 'LEFT'){\n            this.rotation -= this.rotationSpeed\n        }\n        if(dir === 'RIGHT'){\n            this.rotation += this.rotationSpeed\n        }\n    }\n\n    accelerate(val){\n        this.velocity.x -= Math.sin(-this.rotation*Math.PI/180) * this.speed\n        this.velocity.y -= Math.cos(-this.rotation*Math.PI/180) * this.speed\n\n        //thruster animation\n        let posDelta = rotatePoint({x:0, y:-10}, {x:0, y:0}, (this.rotation-180) * Math.PI / 180)\n        const particle = new Particle({\n            lifeSpan: randomNumBetween(20, 40),\n            size: randomNumBetween(1, 3),\n            position: {\n                x: this.position.x + posDelta.x + randomNumBetween(-2, 2),\n                y: this.position.y + posDelta.y + randomNumBetween(-2, 2)\n            },\n            velocity: {\n                x: posDelta.x / randomNumBetween(3, 5),\n                y: posDelta.y / randomNumBetween(3, 5)\n            }\n        })\n        this.create(particle, 'particles')\n    }\n\n    \n\n    render(state){\n        \n        // Controls\n        //if(state.keys.up){\n        //  this.accelerate(1);\n          \n       // }\n        //if(state.keys.left){\n        //  this.rotate('LEFT');\n       // }\n       // if(state.keys.right){\n        //  this.rotate('RIGHT');\n        //}\n        //if(state.keys.space && Date.now() - this.lastShot > 300){\n        //   const bullet = new Bullet({ship: this});\n        //   this.create(bullet, 'bullets');\n        //   this.lastShot = Date.now();\n       // }\n    \n        // Move\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        this.velocity.x *= this.inertia;\n        this.velocity.y *= this.inertia;\n    \n        // Rotation\n        if (this.rotation >= 360) {\n          this.rotation -= 360;\n        }\n        if (this.rotation < 0) {\n          this.rotation += 360;\n        }\n    \n        // Screen edges\n        if(this.position.x > state.screen.width) this.position.x = 0;\n        else if(this.position.x < 0) this.position.x = state.screen.width;\n        if(this.position.y > state.screen.height) this.position.y = 0;\n        else if(this.position.y < 0) this.position.y = state.screen.height;\n    \n        // Draw\n        const context = state.context;\n        context.save();\n        context.translate(this.position.x, this.position.y);\n        context.rotate(this.rotation * Math.PI / 180);\n        context.strokeStyle = '#ffffff';\n        context.fillStyle = '#000000';\n        context.lineWidth = 2;\n        context.beginPath();\n        context.moveTo(0, -15);\n        context.lineTo(10, 10);\n        context.lineTo(5, 7);\n        context.lineTo(-5, 7);\n        context.lineTo(-10, 10);\n        context.closePath();\n        context.fill();\n        context.stroke();\n        context.restore();\n      }\n\n}","import Particle from './Particle';\nimport { asteroidVertices, randomNumBetween } from './helpers';\n\nexport default class Asteroid {\n  constructor(args) {\n    this.position = args.position\n    this.velocity = {\n      x: randomNumBetween(-1.5, 1.5),\n      y: randomNumBetween(-1.5, 1.5)\n    }\n    this.rotation = 0;\n    this.rotationSpeed = randomNumBetween(-1, 1)\n    this.radius = args.size;\n    this.score = (80/this.radius)*5;\n    this.create = args.create;\n    this.addScore = args.addScore;\n    this.vertices = asteroidVertices(8, args.size)\n  }\n\n  destroy(){\n    this.delete = true;\n    //this.addScore(this.score);\n\n    // Explode\n    for (let i = 0; i < this.radius; i++) {\n      const particle = new Particle({\n        lifeSpan: randomNumBetween(60, 100),\n        size: randomNumBetween(1, 3),\n        position: {\n          x: this.position.x + randomNumBetween(-this.radius/4, this.radius/4),\n          y: this.position.y + randomNumBetween(-this.radius/4, this.radius/4)\n        },\n        velocity: {\n          x: randomNumBetween(-1.5, 1.5),\n          y: randomNumBetween(-1.5, 1.5)\n        }\n      });\n      this.create(particle, 'particles');\n    }\n\n    // Break into smaller asteroids\n    if(this.radius > 10){\n      for (let i = 0; i < 2; i++) {\n        let asteroid = new Asteroid({\n\n          size: this.radius/2,\n          position: {\n            x: randomNumBetween(-10, 20)+this.position.x,\n            y: randomNumBetween(-10, 20)+this.position.y\n          },\n          create: this.create.bind(this),\n          //addScore: this.addScore.bind(this)\n        });\n        this.create(asteroid, 'asteroids');\n      }\n    }\n  }\n\n  render(state){\n    // Move\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    // Rotation\n    this.rotation += this.rotationSpeed;\n    if (this.rotation >= 360) {\n      this.rotation -= 360;\n    }\n    if (this.rotation < 0) {\n      this.rotation += 360;\n    }\n\n    // Screen edges\n    if(this.position.x > state.screen.width + this.radius) this.position.x = -this.radius;\n    else if(this.position.x < -this.radius) this.position.x = state.screen.width + this.radius;\n    if(this.position.y > state.screen.height + this.radius) this.position.y = -this.radius;\n    else if(this.position.y < -this.radius) this.position.y = state.screen.height + this.radius;\n\n    // Draw\n    const context = state.context;\n    context.save();\n    context.translate(this.position.x, this.position.y);\n    context.rotate(this.rotation * Math.PI / 180);\n    context.strokeStyle = '#FFF';\n    context.lineWidth = 2;\n    context.beginPath();\n    context.moveTo(0, -this.radius);\n    for (let i = 1; i < this.vertices.length; i++) {\n      context.lineTo(this.vertices[i].x, this.vertices[i].y);\n    }\n    context.closePath();\n    context.stroke();\n    context.restore();\n  }\n}\n","const newPlayer = (socket, player) => {\n    socket.on('connect', () => {\n        socket.emit('new-player', {\n            x: player.position.x,\n            y: player.position.y,\n            angle: player.rotation\n        })\n    })\n}\n\nexport default newPlayer","const playerMovement = otherPlayers => {\n    for(let id in otherPlayers){\n        let player = otherPlayers[id]\n        if(player.x !== undefined){\n            player.position.x += (player.x - player.position.x) * 0.30\n            player.position.y += (player.x - player.position.y) * 0.30\n\n            let angle = player.rotation\n        }\n    }\n}\n\n\n\nexport default playerMovement","import React, { Component } from 'react'\nimport Ship from './Ship';\nimport NotShip from './NotShip'\nimport Asteroid from './Asteroid'\nimport Bullet from './Bullet'\nimport { randomNumBetweenExcluding } from './helpers'\nimport newPlayer from './newPlayer'\n\nimport playerMovement from './playerMovement'\nimport openSocket from 'socket.io-client'\n\n\nconst socket = openSocket('https://pure-oasis-79953.herokuapp.com/')\nlet otherPlayers = {}\n\nconst KEY = {\n    LEFT:  37,\n    RIGHT: 39,\n    UP: 38,\n    A: 65,\n    D: 68,\n    W: 87,\n    SPACE: 32\n  };\n\n\nexport class Reacteroids extends Component {\n    constructor() {\n        super();\n        this.state = {\n          screen: {\n            width: window.innerWidth,\n            height: window.innerHeight,\n            ratio: window.devicePixelRatio || 1,\n          },\n          context: null,\n          keys : {\n            left  : 0,\n            right : 0,\n            up    : 0,\n            down  : 0,\n            space : 0,\n          },\n          asteroidCount: 3,\n          currentScore: 0,\n          topScore: localStorage['topscore'] || 0,\n          inGame: false\n        }\n        this.ship = [];\n        this.asteroids = [];\n        this.bullets = [];\n        this.particles = [];\n        this.notship = [];\n    }\n    \n    handleResize(value, e){\n        this.setState({\n          screen : {\n            width: window.innerWidth,\n            height: window.innerHeight,\n            ratio: window.devicePixelRatio || 1,\n          }\n        });\n    }\n\n    handleKeys(value, e){\n        let keys = this.state.keys;\n        if(e.keyCode === KEY.LEFT   || e.keyCode === KEY.A) keys.left  = value;\n        if(e.keyCode === KEY.RIGHT  || e.keyCode === KEY.D) keys.right = value;\n        if(e.keyCode === KEY.UP     || e.keyCode === KEY.W) keys.up    = value;\n        if(e.keyCode === KEY.SPACE) keys.space = value;\n        this.setState({\n          keys : keys\n        });\n    }\n\n    componentDidMount() {\n        window.addEventListener('keyup',   this.handleKeys.bind(this, false));\n        window.addEventListener('keydown', this.handleKeys.bind(this, true));\n        window.addEventListener('resize',  this.handleResize.bind(this, false));\n    \n        const context = this.refs.canvas.getContext('2d');\n        this.setState({ context: context });\n        this.startGame();\n        requestAnimationFrame(() => {this.update()});\n    }\n    \n    componentWillUnmount() {\n        window.removeEventListener('keyup', this.handleKeys);\n        window.removeEventListener('keydown', this.handleKeys);\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    updatePlayers(socket, otherPlayers){\n      socket.on('update-players', playersData => {\n          let playersFound = {}\n  \n          for(let index in playersData){\n              const data = playersData[index]\n              if(otherPlayers[index] === undefined && index !== socket.id){\n                  //create new ship if it isn't already created\n                  let othership = new NotShip({\n                      position: {\n                        x: data.x,\n                        y: data.y\n                      },\n                      create: this.createObject.bind(this),\n                      onDie: this.gameOver.bind(this)\n                    });\n                    this.createObject(othership, 'notship');\n                    otherPlayers[index] = othership\n              }\n              playersFound[index] = true\n  \n              if(index !== socket.id) {\n                  //update players positions\n                  otherPlayers[index].x = data.x\n                  otherPlayers[index].y = data.y\n                  otherPlayers[index].rotation = data.angle\n              }\n          }\n          for(let id in otherPlayers){\n              if(!playersFound[id]){\n                  //delete missing players here\n                  otherPlayers[id].destroy();\n              }\n          }\n      })\n  }\n\n\n    emitPlayerData() {\n        //console.log(\"emitting move\", this.ship[0])\n        socket.emit('move-player', this.ship[0])\n    }\n\n    //game loop\n    update() {\n        const context = this.state.context;\n        const keys = this.state.keys;\n        const ship = this.ship[0];\n        const notship = this.notship\n\n        if(ship){\n          if((ship.velocity.x > 0.1 || ship.velocity.x < -0.1) || (ship.velocity.y > 0.1 || ship.velocity.y < -0.1)){\n            this.emitPlayerData()\n          }\n        }\n        playerMovement(otherPlayers)\n\n        context.save();\n        context.scale(this.state.screen.ratio, this.state.screen.ratio);\n    \n        // Motion trail\n        context.fillStyle = '#000';\n        context.globalAlpha = 0.4;\n        context.fillRect(0, 0, this.state.screen.width, this.state.screen.height);\n        context.globalAlpha = 1;\n    \n        // Next set of asteroids\n        if(!this.asteroids.length){\n          let count = this.state.asteroidCount + 1;\n          this.setState({ asteroidCount: count });\n          this.generateAsteroids(count)\n        }\n    \n        // Check for colisions\n        this.checkCollisionsWith(this.bullets, this.asteroids);\n        this.checkCollisionsWith(this.ship, this.asteroids);\n    \n        // Remove or render\n        this.updateObjects(this.particles, 'particles')\n        this.updateObjects(this.asteroids, 'asteroids')\n        this.updateObjects(this.bullets, 'bullets')\n        this.updateObjects(this.ship, 'ship')\n        this.updateObjects(this.notship, 'notship')\n    \n        context.restore();\n    \n        // Next frame\n        requestAnimationFrame(() => {this.update()});\n    }\n    \n\n    //runs once when game starts\n    startGame(){\n        this.setState({\n          inGame: true,\n          currentScore: 0,\n        });\n        \n    \n        // Make ship\n        let ship = new Ship({\n          position: {\n            x: this.state.screen.width/2,\n            y: this.state.screen.height/2\n          },\n          create: this.createObject.bind(this),\n          onDie: this.gameOver.bind(this)\n        });\n        this.createObject(ship, 'ship');\n        newPlayer(socket, ship)\n        this.updatePlayers(socket, otherPlayers)\n        \n    \n        // Make asteroids\n        this.asteroids = [];\n        this.generateAsteroids(this.state.asteroidCount)\n    }\n      \n    gameOver(){\n      this.setState({\n        inGame: false,\n      });\n  \n      // Replace top score\n      if(this.state.currentScore > this.state.topScore){\n        this.setState({\n          topScore: this.state.currentScore,\n        });\n        localStorage['topscore'] = this.state.currentScore;\n      }\n    }\n\n    generateAsteroids(howMany){\n      let asteroids = [];\n      let ship = this.ship[0];\n      for (let i = 0; i < howMany; i++) {\n        let asteroid = new Asteroid({\n          size: 80,\n          position: {\n            x: randomNumBetweenExcluding(0, this.state.screen.width, ship.position.x-60, ship.position.x+60),\n            y: randomNumBetweenExcluding(0, this.state.screen.height, ship.position.y-60, ship.position.y+60)\n          },\n          create: this.createObject.bind(this),\n          //addScore: this.addScore.bind(this)\n        });\n        this.createObject(asteroid, 'asteroids');\n      }\n    }\n\n    createObject(item, group){\n        this[group].push(item);\n    }\n    \n    updateObjects(items, group){\n        let index = 0;\n        for (let item of items) {\n          if (item.delete) {\n            this[group].splice(index, 1);\n          }else{\n            items[index].render(this.state);\n          }\n          index++;\n        }\n    }\n    \n    checkCollisionsWith(items1, items2) {\n        var a = items1.length - 1;\n        var b;\n        for(a; a > -1; --a){\n          b = items2.length - 1;\n          for(b; b > -1; --b){\n            var item1 = items1[a];\n            var item2 = items2[b];\n            if(this.checkCollision(item1, item2)){\n              item1.destroy();\n              item2.destroy();\n            }\n          }\n        }\n    }\n    \n    checkCollision(obj1, obj2){\n        var vx = obj1.position.x - obj2.position.x;\n        var vy = obj1.position.y - obj2.position.y;\n        var length = Math.sqrt(vx * vx + vy * vy);\n        if(length < obj1.radius + obj2.radius){\n          return true;\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref=\"canvas\"\n                    width={this.state.screen.width * this.state.screen.ratio}\n                    height={this.state.screen.height * this.state.screen.ratio}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Reacteroids } from './Reacteroids';\nimport style from './style.css';\n\nrender(<Reacteroids />, document.getElementById('root'));\n\n"],"sourceRoot":""}